from twitcher.__meta__ import __version__ as twitcher_version
from twitcher.adapter import get_adapter_factory
from twitcher.db import get_database_type
from twitcher.owsproxy import owsproxy_base_url
from twitcher.restapi.utils import restapi_enabled, restapi_base_url, ows_json_format
from twitcher.rpcinterface import rpc_enabled, rpc_base_url
from twitcher.swagger import schemas as s
from twitcher.utils import get_settings
from pyramid.settings import asbool
from pyramid.exceptions import PredicateMismatch
from pyramid.httpexceptions import HTTPMethodNotAllowed, HTTPNotFound, HTTPUnauthorized, HTTPForbidden
from pyramid.interfaces import IAuthenticationPolicy
from pyramid.security import Authenticated
from typing import TYPE_CHECKING
import logging
if TYPE_CHECKING:
    from twitcher.typedefs import JSON
    from pyramid.request import Request
LOGGER = logging.getLogger(__name__)


@s.restapi_frontpage_service.get(tags=[s.TagAPI], renderer='json',
                                 schema=s.FrontpageEndpoint(), response_schemas=s.get_api_frontpage_responses)
def frontpage_view(request):
    # type: (Request) -> JSON
    """Frontpage of Twitcher REST API."""

    settings = get_settings(request)
    twitcher_db = get_database_type(settings)
    twitcher_api_enabled = restapi_enabled(settings)
    twitcher_api_url = restapi_base_url(settings) if twitcher_api_enabled else None
    twitcher_api_doc = twitcher_api_url + s.swagger_ui_uri if twitcher_api_enabled else None
    twitcher_rpc_enabled = rpc_enabled(settings)
    twitcher_rpc_url = rpc_base_url(settings) if twitcher_rpc_enabled else None
    twitcher_proxy_enabled = asbool(settings.get('twitcher.ows_proxy'))
    twitcher_proxy_url = owsproxy_base_url(settings) if twitcher_proxy_enabled else None
    twitcher_adapter = get_adapter_factory(settings)

    return {
        'message': 'Twitcher Information',
        'adapter': twitcher_adapter.describe_adapter(),
        'database': twitcher_db,
        'parameters': [
            {'name': 'api',
             'enabled': twitcher_api_enabled,
             'url': twitcher_api_url,
             'doc': twitcher_api_doc},
            {'name': 'rpc',
             'enabled': twitcher_rpc_enabled,
             'url': twitcher_rpc_url},
            {'name': 'proxy',
             'enabled': twitcher_proxy_enabled,
             'url': twitcher_proxy_url},
        ]
    }


@s.restapi_versions_service.get(tags=[s.TagAPI], renderer='json',
                                schema=s.VersionsEndpoint(), response_schemas=s.get_api_versions_responses)
def versions_view(request):
    # type: (Request) -> JSON
    """Twitcher versions information."""
    from twitcher.adapter import get_adapter_factory
    adapter_info = get_adapter_factory(request.registry.settings).describe_adapter()
    adapter_info['type'] = 'adapter'
    twitcher_info = {'name': 'Twitcher', 'version': twitcher_version, 'type': 'api'}
    return {'versions': [twitcher_info, adapter_info]}


@ows_json_format
def not_found_or_method_not_allowed_view(request):
    """
    Overrides the default is HTTPNotFound [404] by appropriate HTTPMethodNotAllowed [405] when applicable.

    Not found response can correspond to underlying process operation not finding a required item, or a completely
    unknown route (path did not match any existing API definition).
    Method not allowed is more specific to the case where the path matches an existing API route, but the specific
    request method (GET, POST, etc.) is not allowed on this path.

    Without this fix, both situations return [404] regardless.
    """
    # noinspection PyProtectedMember
    if isinstance(request.exception, PredicateMismatch) and request.method not in request.exception._safe_methods:
        http_err = HTTPMethodNotAllowed
        http_msg = ""  # auto-generated by HTTPMethodNotAllowed
    else:
        http_err = HTTPNotFound
        http_msg = str(request.exception)
    return http_err(http_msg)


@ows_json_format
def unauthorized_or_forbidden_view(request):
    """
    Overrides the default is HTTPForbidden [403] by appropriate HTTPUnauthorized [401] when applicable.

    Unauthorized response is for restricted user access according to credentials and/or authorization headers.
    Forbidden response is for operation refused by the underlying process operations.

    Without this fix, both situations return [403] regardless.

    .. seealso::
        http://www.restapitutorial.com/httpstatuscodes.html
    """
    authn_policy = request.registry.queryUtility(IAuthenticationPolicy)
    if authn_policy:
        principals = authn_policy.effective_principals(request)
        if Authenticated not in principals:
            return HTTPUnauthorized("Unauthorized access to this resource.")
    return HTTPForbidden("Forbidden operation under this resource.")
